demo()
is.things
is.things()
help.start()
a <- available.packages()
head(rownames(a),3)
find.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
5+7
x<- 5+7
x
y<- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
bye()
q()
swirl()
library(swirl)
swirl()
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
(Z-1)^0.5
(z-1)^0.5
info()
play()
(z-1)^0.5
nxt()
mySqrt <- (z-1)^0.5
mySqrt <- ((z-1)^0.5)
mysqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
mySqrt <- (z-1)^0.5
help()
mySqrt <- (z-1)^2
mySqrt <- (z-1)^0.5
play()
mySqrt <- (z-1)^0.5
mysqrt
mySqrt
nxt()
mySqrt <- (z-1)^0.5
mySqrt<- (z-1)^0.5
mySqrt<-(z-1)^0.5
skip()
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
1:20
pi:10
15:1
nxt()
nxt()
skip()
seq(1,20)
seq(0,10, by=.5)
seq(5,10,length=30)
myseq<- seq(5,10,length=30)
my_seq<- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_sec)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
bye
bye()
q()
x<-4
x
class(x)
x<-c(4,TRUE)
x
x<-c(1,3,5)
y<-c(3,2,10)
cbind(x,y)
rbind(x,y)
q()
mA <-matrix(1:4,2,2)
mA
?rbin
?rnorm
(rnorm)
set.seed(1)
rpois(5,2)
getwd()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
install.packages("kernlab")
library(kernlab)
?data
data(spam)
str(spam)
?spam
set.seed(3435)
trainIndicator <- rbinom(4601,size=1, prob=0.5)
?table
table(trainIndicator)
trainSpam <-spm[trainIndicator==1,]
trainSpam <-spam[trainIndicator==1,]
testSpam <-spam[trainIndicator==0,]
names(trainSpam)
summary(trainSpam)
plot(log10(trainSpam$capitalAve+1)~trainSpam$type)
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
summary(trainSpam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
## Use the best model from the group
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
## Classification table
table(predictedSpam, testSpam$type)
## Error rate
(61 + 458)/(1346 + 458 + 61 + 449)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_vline(xintercept=xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_vline(xintercept=xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
data(mtcars)
fit <- lm(y~cyl+wt, data=mtcars)
fit <- lm(y~cyl+wt, data=mtcars, drop.unusee=FALSE)
data(mtcars)
fitSimple <- lm(mpg~am, data=mtcars)
fitFull <- lm(mpg~., data=mtcars)
fitFullxxx <- lm(mpg~cyl, data=mtcars)
fitFullxxx <- lm(mpg~wt, data=mtcars)
fit <- lm(mpg~cyl+wt, data=mtcars)
fitFac <- lm(mpg~cyl+wt, data=df)
data(mtcars)
str(mtcars)
df <- mtcars
df[,2] <- as.factor(df[,2])
fitFac <- lm(mpg~cyl+wt, data=df)
fit <- lm(mpg~cyl+wt, data=mtcars)
str(fit)
fit
fitFac
plot(fit)
plot(fit)
fitFac <- lm(mpg~wt+cyl, data=df)
fitFac
plot(df$cyl,df$mpg)
summary(fitFac)
summary(fitFac)
fit<-lm(mpg~wt+cyl, data=mtcars)
plot(mtcars$cyl,mtcars$mpg)
summary(fit)
plot(df$cyl,df$mpg)
summary(fitFac)
fitFac$cyl8
fitFac$coeff
fitFac$coeff[3]
fitFac$coeff[4]
fitFacUnadj  <- lm(mpg~cyl, data=df)
plot(df$cyl,df$mpg)
summary(fitFacUnadj)
fitFacUnadj$coeff[4]
fitFacUnadj$coeff[3]
fitFacInteract <- lm(mpg~wt+cyl+wt*cyl, data=df)
plot(df$cyl,df$mpg)
summary(fitFacInteract)
fitFac$coeff[4]
fitFacInteract$coeff[4]
anova(fitFac, fitFacInteract)
I(mtcars$wt*.5)
?I
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
summary(fitFac)
fit5 <- lm(y~x)
dfbetas(fit)
dfbetas(fit5)
?dfbetas
hatvalues(fit5)
hatvalues(fit5)[1:5]
summary(fit5)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y~x)
dfbetas(fit5)
dfbetas(fit5)[1:5,2]
hatvalues(fit5)[1:5]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(, CompressiveStrength, data=training)
qplot(, CompressiveStrength, colour=fly, data=training)
?cut2
library(Hmisc)
?cut2
training$cutCement <- cut2(training$cement, g=3)
library(ISLR); library(ggplot2); library(caret); library(gridExtra);
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq +  geom_smooth(method='lm',formula=y~x)
cutWage <- cut2(training$wage,g=3)
class(training$wage)
str(training$wage)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(, CompressiveStrength, data=training)
library(Hmisc)
class(training$cement)
View(training)
class(training$Cement)
cut2(training$Cement,g=3)
training$cutCement <- cut2(training$Cement, g=3)
training$cutBlastFurnaceSlag <- cut2(training$BlastFurnaceSlag, g=3)
training$cutFlyAsh <- cut2(training$FlyAsh, g=3)
training$cutWater <- cut2(training$Water, g=3)
training$cutSuperplasticizer <- cut2(training$Superplasticizer, g=3)
training$cutCoarseAggregate <- cut2(training$CoarseAggregate, g=3)
training$cutFineAggregate <- cut2(training$FineAggregate, g=3)
training$cutAge <- cut2(training$Age, g=3)
qplot(, CompressiveStrength,colour=cutCement,data=training)
qplot(, CompressiveStrength,colour=cutBlastFurnaceSlag,data=training)
qplot(, CompressiveStrength,colour=cutFlyAsh,data=training)
qplot(, CompressiveStrength,colour=cutWater,data=training)
qplot(, CompressiveStrength,colour=cutSuperplasticizer,data=training)
qplot(, CompressiveStrength,colour=cutCoarseAggregate,data=training)
qplot(, CompressiveStrength,colour=cutFineAggregate,data=training)
qplot(, CompressiveStrength,colour=cutAge,data=training)
qplot(, CompressiveStrength,colour=cutFlyAsh,data=training)
qplot(, CompressiveStrength,colour=cutCement,data=training)
qplot(, CompressiveStrength,colour=cutBlastFurnaceSlag,data=training)
qplot(, CompressiveStrength,colour=cutFlyAsh,data=training)
qplot(, CompressiveStrength,colour=cutWater,data=training)
qplot(, CompressiveStrength,colour=cutSuperplasticizer,data=training)
qplot(, CompressiveStrength,colour=cutCoarseAggregate,data=training)
qplot(, CompressiveStrength,colour=cutFineAggregate,data=training)
qplot(, CompressiveStrength,colour=cutAge,data=training)
library(caret)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,-c(1:57,70:131)]
preProcess(trainingIL, method="pca", thresh=0.8)
?predict
preProc <- preProcess(trainingIL, method="pca", thresh=0.8)
trainingILPCA <- predict(preProc,trainingIL)
PCAfit <- train(diagnosis~., method="glm", data=trainingILPCA)
preProc
PCAfit <- train(trainingILPCAdiagnosis~., method="glm", data=trainingILPCA)
PCAfit <- train(trainingILPCA$diagnosis~., method="glm", data=trainingILPCA)
PCAfit <- train(trainingIL$diagnosis~., method="glm", data=trainingILPCA)
View(trainingILPCA)
View(trainingIL)
?cbind
cbind(trainingILPCA,training$diagnosis)
trainingILPCA <- cbind(trainingILPCA,training$diagnosis)
View(trainingILPCA)
trainingILPCA <- predict(preProc,trainingIL)
trainingILPCA <- trainingILPCA + training[,1]
trainingILPCA$diagnosis <- training[,1]
View(trainingILPCA)
preProc <- preProcess(trainingIL, method="pca", thresh=0.8)
trainingILPCA <- predict(preProc,trainingIL)
trainingILPCA$diagnosis <- training[,1]
PCAfit <- train(diagnosis~., method="glm", data=trainingILPCA)
confusionMatrix(testingIL$diagnosis, predict(PCAfit,testingIL))
testingIL <- testing[,-c(2:57,70:131)]
confusionMatrix(testingIL$diagnosis, predict(PCAfit,testingIL))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,-c(2:57,70:131)]
nonPCAfit <- train(diagnosis~., method="glm", data=trainingIL)
testingIL <- testing[,-c(2:57,70:131)]
confusionMatrix(testingIL$diagnosis, predict(nonPCAfit,testingIL))
preProc <- preProcess(trainingIL, method="pca", thresh=0.8)
View(trainingIL)
preProc <- preProcess(trainingIL[,-1], method="pca", thresh=0.8)
trainingILPCA <- predict(preProc,trainingIL)
trainingILPCA <- predict(preProc,trainingIL[,-1])
trainingILPCA$diagnosis <- training[,1]
PCAfit <- train(diagnosis~., method="glm", data=trainingILPCA)
confusionMatrix(testingIL$diagnosis, predict(PCAfit,testingIL))
testPCA <- predict(preProc, testingIL)
testPCA <- predict(preProc, testingIL[,-1])
confusionMatrix(testingIL$diagnosis, predict(PCAfit,testingPCA))
testingPCA <- predict(preProc, testingIL[,-1])
confusionMatrix(testingIL$diagnosis, predict(PCAfit,testingPCA))
setwd("~/P/New private/MOOC/Data Specialization/R-WD/devDataProdProj/College")
library(slidify)
library(knitr)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
library(slidifyLibraries)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
